#!/usr/bin/env bash

# Define functions

function get_clipboard_tool() {
  if [ "$(uname)" == "Darwin" ]; then
    if command -v pbcopy >/dev/null; then
      echo "pbcopy"
      return
    fi
  elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
    if [ "$XDG_SESSION_TYPE" == "wayland" ]; then
      if command -v wl-copy >/dev/null; then
        echo "wl-copy"
        return
      fi
    else
      if command -v xclip >/dev/null; then
        echo "xclip -selection clipboard"
        return
      elif command -v xsel >/dev/null; then
        echo "xsel -ib"
        return
      fi
    fi
  elif [ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]; then
    if command -v powershell >/dev/null; then
      echo "powershell.exe Get-Clipboard -Raw | Set-Content -Encoding Utf8"
      return
    fi
  fi
  echo "No clipboard tool found."
}

function apply_patch() {
  local patch_file="$1"
  git apply --check "$patch_file"
  if [ $? -ne 0 ]; then
    echo "Patch file contains errors. Please fix the errors and try again."
    return 1
  fi
  git apply "$patch_file"
}

# Get the clipboard tool to use
clipboard_tool="$(get_clipboard_tool)"
if [[ $clipboard_tool == "No clipboard tool found." ]]; then
  echo "No suitable clipboard tool found. Please install xclip, xsel, wl-copy, or pbcopy and try again."
  exit 1
fi

# Get the contents of the clipboard
clipboard_contents="$(eval "$clipboard_tool")"

# Get the commit message from the first line of the clipboard contents
commit_message="$(echo "$clipboard_contents" | head -n 1)"

# Get the patch from the rest of the clipboard contents
patch="$(echo "$clipboard_contents" | tail -n +2)"

# Save the patch to a file
patch_file="$(mktemp)"
echo "$patch" > "$patch_file"

# Apply the patch and commit the changes
apply_patch "$patch_file"
if [ $? -eq 0 ]; then
  rm "$patch_file"
  git add .
  git commit -m "$commit_message"
  echo "Changes committed successfully."
else
  rm "$patch_file"
  echo "Changes were not committed due to errors applying the patch."
fi
